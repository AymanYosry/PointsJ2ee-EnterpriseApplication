/**
 * 
 */
package com.ewhale.points.ws.interceptors;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import javax.annotation.Priority;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.Provider;
import javax.ws.rs.ext.ReaderInterceptor;
import javax.ws.rs.ext.ReaderInterceptorContext;

import org.jboss.logging.Logger;

import com.ewhale.points.common.annotations.VerifyDigitaSignature;
import com.ewhale.points.common.exception.AuthenticationSecurityException;
import com.ewhale.points.common.security.SecurityFactory;
import com.ewhale.points.common.security.base64.BASE64Encoder;
import com.ewhale.points.common.util.AppConstants;
import com.ewhale.points.common.util.ExceptionConstants;

/**
 * @author Ayman Yosry
 * @updated Ahmad Khalil
 */

@Provider
@Priority(value = 1)
@VerifyDigitaSignature
public class ServiceDigitalSignaturePreInterceptor implements ReaderInterceptor
{
	protected Logger logger = Logger.getLogger(ServiceDigitalSignaturePreInterceptor.class);

	//IMP_Ahmed IMP_Ayman below boolean should be deleted after digital signature finished on mobile
	private boolean signActivated = true;

	@Override
	public Object aroundReadFrom(ReaderInterceptorContext readerInterceptorContext) throws IOException, WebApplicationException
	{
		if (signActivated)
		{
			BASE64Encoder b64 = new BASE64Encoder();
			String signatureHeaderValue = readerInterceptorContext.getHeaders().getFirst(AppConstants.SecurityConstants.SIGNATURE);
			InputStream inputStream = readerInterceptorContext.getInputStream();

			byte[] dataArr = new byte[inputStream.available()];
			inputStream.read(dataArr);
			String data = b64.encode(dataArr);

			logger.debug("############# signature in server reader interceptor : " + signatureHeaderValue);
			logger.debug("############# data in server reader interceptor : " + data);
			try
			{
				boolean isVerified = false;

				isVerified = SecurityFactory.getSecurityBuilder(SecurityFactory.CMS_SECURITY_BUILDER).verify(data, signatureHeaderValue);
				if (isVerified)
				{
					logger.debug("############# Signature verified");
				}
				else
				{
					logger.debug("############# Signature verification failed");
					Response response = Response.status(ExceptionConstants.SECURITY_EXCETION_STATUS_CODE)
							.entity(ExceptionConstants.INVALID_DIGITAL_SIGNATURE).type(ExceptionConstants.EXCEPTION_MESSAGE_TYPE).build();
					throw new WebApplicationException("Problem While verifying signature", response);
				}
			}
			catch (AuthenticationSecurityException e)
			{
				logger.error("############# problem checking signature", e);
				Response response = Response.status(e.getStatusCode()).entity(e.getMessage()).type(ExceptionConstants.EXCEPTION_MESSAGE_TYPE).build();
				throw new WebApplicationException("Problem While retrieving data", response);
			}
			readerInterceptorContext.setInputStream(new ByteArrayInputStream(dataArr));
		}
		else
			logger.debug("############# Signature validation is deactivated");
		
		return readerInterceptorContext.proceed();
	}
}
