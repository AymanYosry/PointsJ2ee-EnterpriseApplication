package com.ewhale.points.ws.main.proxy;

import org.jboss.resteasy.client.jaxrs.ResteasyClient;
import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;
import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;
import org.jboss.resteasy.client.jaxrs.engines.URLConnectionEngine;

import com.ewhale.points.common.util.AppConstants;
import com.ewhale.points.ws.agent.proxy.AgentAdminServiceClient;
import com.ewhale.points.ws.agent.proxy.AgentSellerServiceClient;
import com.ewhale.points.ws.interceptors.ServiceClientDigitalSignaturePreInterceptor;
import com.ewhale.points.ws.interceptors.ServiceClientTokenVerificationInterceptor;
import com.ewhale.points.ws.security.proxy.AuthenticationServiceClient;
import com.ewhale.points.ws.system.proxy.SystemAdminServiceClient;
import com.ewhale.points.ws.system.proxy.SystemSalesServiceClient;
import com.ewhale.points.ws.user.proxy.UserServiceClient;

public class ServiceClientUtil
{
	private static boolean signActivated = false;

	// IMP_Ahmed modify (refund, fund, points exchange, points re-exchange, add payment) to support digital signature
	private static ResteasyWebTarget getWebServiceTarget()
	{
		URLConnectionEngine engine = new URLConnectionEngine();
		ResteasyClient client = new ResteasyClientBuilder().httpEngine(engine).build();
		ResteasyWebTarget target = client
				.target(AppConstants.WEBPROTOCOL + "://" + AppConstants.HOSTNAME + ":" + AppConstants.PORT + AppConstants.SERVICE_MAIN_PATH);
		return target;
	}

	public static AgentAdminServiceClient getAgentAdminServiceClient(String token)
	{
		ResteasyWebTarget target = ServiceClientUtil.getWebServiceTarget();
		target.register(new ServiceClientTokenVerificationInterceptor(token));
		AgentAdminServiceClient agentAdminServiceClient = target.proxy(AgentAdminServiceClient.class);
		return agentAdminServiceClient;
	}

	public static AgentSellerServiceClient getAgentSellerServiceClient(String token, boolean sign)
	{
		ResteasyWebTarget target = ServiceClientUtil.getWebServiceTarget();
		target.register(new ServiceClientTokenVerificationInterceptor(token));
		if (sign&&signActivated)
			target.register(ServiceClientDigitalSignaturePreInterceptor.class);
		AgentSellerServiceClient agentSellerServiceClient = target.proxy(AgentSellerServiceClient.class);
		return agentSellerServiceClient;
	}

	public static SystemSalesServiceClient getSystemSalesServiceClient(String token)
	{
		ResteasyWebTarget target = ServiceClientUtil.getWebServiceTarget();
		target.register(new ServiceClientTokenVerificationInterceptor(token));
		SystemSalesServiceClient systemSalesServiceClient = target.proxy(SystemSalesServiceClient.class);
		return systemSalesServiceClient;
	}

	public static SystemAdminServiceClient getSystemAdminServiceClient(String token, boolean sign)
	{
		ResteasyWebTarget target = ServiceClientUtil.getWebServiceTarget();
		target.register(new ServiceClientTokenVerificationInterceptor(token));
		if (sign&&signActivated)
			target.register(ServiceClientDigitalSignaturePreInterceptor.class);
		SystemAdminServiceClient systemAdminServiceClient = target.proxy(SystemAdminServiceClient.class);
		return systemAdminServiceClient;
	}

	public static UserServiceClient getUserServiceClient()
	{
		ResteasyWebTarget target = ServiceClientUtil.getWebServiceTarget();
		UserServiceClient userServiceClient = target.proxy(UserServiceClient.class);
		return userServiceClient;
	}

	public static UserServiceClient getUserServiceClient(String token)
	{
		ResteasyWebTarget target = ServiceClientUtil.getWebServiceTarget();
		target.register(new ServiceClientTokenVerificationInterceptor(token));
		UserServiceClient userServiceClient = target.proxy(UserServiceClient.class);
		return userServiceClient;
	}

	public static LookUpServiceClient getLookUpServiceClient(String token)
	{
		ResteasyWebTarget target = ServiceClientUtil.getWebServiceTarget();
		target.register(new ServiceClientTokenVerificationInterceptor(token));
		LookUpServiceClient lookUpServiceClient = target.proxy(LookUpServiceClient.class);
		return lookUpServiceClient;
	}

	public static AuthenticationServiceClient getAuthenticationServiceClient(boolean sign)
	{
		ResteasyWebTarget target = ServiceClientUtil.getWebServiceTarget();
		if (sign&&signActivated)
			target.register(ServiceClientDigitalSignaturePreInterceptor.class);
		AuthenticationServiceClient authenticationServiceClient = target.proxy(AuthenticationServiceClient.class);
		return authenticationServiceClient;
	}
}
